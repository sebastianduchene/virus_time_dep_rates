alns <- system("ls *.fasta", intern = TRUE)
setwd("../../../code/")
alns
estimate_rate(alns[1])
setwd("~/Dropbox/virus_time_dependency/code")
library(ape)
devtools::source_url("https://raw.githubusercontent.com/maxbiostat/CODE/master/R/PHYLO/find_best_rooting.R")
rm(get.ages)
lastf <- function(x) x[length(x)]
get.ages <- function(tree){
dates <- unlist(lapply(strsplit(tree$tip.label, "_"), lastf))
return(as.numeric(dates))
}
estimate_rate <- function(aln){
Stem <- gsub(".fasta", "", aln)
MLtree <- read.tree(paste(Stem, "_MLTree.nwk", sep = ""))
res <- find_best_rooting(MLtree)$lm
return(res)
}
setwd("../data/processed/aligned/")
alns <- system("ls *.fasta", intern = TRUE)
estimate_rate(aln = alns[1])
RDVS <- parallel::mclapply(alns, estimate_rate, mc.cores = 8)
RDVS
getRate <- function(lm_obj){
m <-  coef(lm_obj)[2]
ci <- confint(lm_obj)[2, ]
return(c(ci[1], m, ci[2]))
}
Rates <- matrix(NA, ncol = 3, nrow = length(RDVS))
colnames(Rates) <- c("lwr", "mean", "upr")
for (i in 1:nrow(Rates)) Rates[i, ] <- getRate(RDVS[[i]])
Rates
RDVS
Names <- gsub(".fasta", "", alns)
Names
RDVS
RDVS[[1]]
str(RDVS[[1]])
str(RDVS[[1]]$model)
str(RDVS[[1]]$model$ages)
range(RDVS[[1]]$model$ages)
getSpan <- function(rdv){
r <-range(rdv$model$ages)
r[2]-r[1]
}
spans <- unlist(lapply(RDVS, getSpan))
spans
table(spans)
plot(Rates[, 2] ~ spans)
plot(Rates[, 2] ~ spans, xlim = c(0, .002))
plot(Rates[, 2] ~ spans, xlim = c(0, .0002))
plot(Rates[, 2] ~ spans, ylim = c(0, .0002))
plot(Rates[, 2] ~ spans, ylim = c(0, .002))
plot(Rates[, 2] ~ spans, ylim = c(0, 2E-3))
plot(Rates[, 2] ~ spans, ylim = c(0, 2E-3))
boxplot(Rates[, 2] ~ spans)
abline(h = mean(Rates[,2]))
abline(h = mean(Rates[,2]), lwd = 3)
forPlot <- data.frame(Rates, time_span = spans)
forPlot
number_ticks <- function(n) { function(limits) pretty(limits, n) }
p <- ggplot(forPlot, aes(x = time_span, y = mean)) +
geom_pointrange(aes(ymin = lwr, ymax = upr), position = position_dodge(0.5)) +
scale_y_continuous("Evolutionary Rate (s/s/y) [regression slope] ", breaks = number_ticks(10), expand = c(0, 0)) +
scale_x_continuous("Sampling span (years)", breaks = number_ticks(10), expand = c(0, 0)) +
theme_bw()
library(ggplot2)
forPlot <- data.frame(Rates, time_span = spans)
number_ticks <- function(n) { function(limits) pretty(limits, n) }
p <- ggplot(forPlot, aes(x = time_span, y = mean)) +
geom_pointrange(aes(ymin = lwr, ymax = upr), position = position_dodge(0.5)) +
scale_y_continuous("Evolutionary Rate (s/s/y) [regression slope] ", breaks = number_ticks(10), expand = c(0, 0)) +
scale_x_continuous("Sampling span (years)", breaks = number_ticks(10), expand = c(0, 0)) +
theme_bw()
p
p <- ggplot(forPlot, aes(x = time_span, y = mean)) +
geom_smooth() +
geom_pointrange(aes(ymin = lwr, ymax = upr), position = position_dodge(0.5)) +
geom_abline(intercept = 0, slope = 0, linetype = "longdash", size = .5, color = "black") +
scale_y_continuous("Evolutionary Rate (s/s/y) [regression slope] ", breaks = number_ticks(10), expand = c(0, 0)) +
scale_x_continuous("Sampling span (years)", breaks = number_ticks(10), expand = c(0, 0)) +
theme_bw()
p
p <- ggplot(forPlot, aes(x = time_span, y = mean)) +
geom_smooth() +
geom_pointrange(aes(ymin = lwr, ymax = upr), position = position_dodge(0.5)) +
geom_abline(intercept = 0, slope = 0, linetype = "longdash", size = .5, color = "black") +
scale_y_continuous("Evolutionary Rate (s/s/y) [regression slope] ", breaks = number_ticks(10), expand = c(0, 0)) +
scale_x_continuous("Sampling span (years)", breaks = number_ticks(10), expand = c(0, 0)) +
ggtitle("Rate estimates by RDV regression -- Influenza H3N2")
theme_bw()
p
forPlot <- data.frame(Rates, time_span = spans)
number_ticks <- function(n) { function(limits) pretty(limits, n) }
p <- ggplot(forPlot, aes(x = time_span, y = mean)) +
geom_smooth() +
geom_pointrange(aes(ymin = lwr, ymax = upr), position = position_dodge(0.5)) +
geom_abline(intercept = 0, slope = 0, linetype = "longdash", size = .5, color = "black") +
scale_y_continuous("Evolutionary Rate (s/s/y) [regression slope] ", breaks = number_ticks(10), expand = c(0, 0)) +
scale_x_continuous("Sampling span (years)", breaks = number_ticks(10), expand = c(0, 0)) +
ggtitle("Rate estimates by RDV regression -- Influenza H3N2") +
theme_bw()
p
p <- ggplot(forPlot, aes(x = time_span, y = mean)) +
geom_smooth(stat = "lm") +
geom_pointrange(aes(ymin = lwr, ymax = upr), position = position_dodge(0.5)) +
geom_abline(intercept = 0, slope = 0, linetype = "longdash", size = .5, color = "black") +
scale_y_continuous("Evolutionary Rate (s/s/y) [regression slope] ", breaks = number_ticks(10), expand = c(0, 0)) +
scale_x_continuous("Sampling span (years)", breaks = number_ticks(10), expand = c(0, 0)) +
ggtitle("Rate estimates by RDV regression -- Influenza H3N2") +
theme_bw()
p
library(ggplot2)
forPlot <- data.frame(Rates, time_span = spans)
number_ticks <- function(n) { function(limits) pretty(limits, n) }
p <- ggplot(forPlot, aes(x = time_span, y = mean)) +
geom_smooth(method = 'lm') +
geom_pointrange(aes(ymin = lwr, ymax = upr), position = position_dodge(0.5)) +
geom_abline(intercept = 0, slope = 0, linetype = "longdash", size = .5, color = "black") +
scale_y_continuous("Evolutionary Rate (s/s/y) [regression slope] ", breaks = number_ticks(10), expand = c(0, 0)) +
scale_x_continuous("Sampling span (years)", breaks = number_ticks(10), expand = c(0, 0)) +
ggtitle("Rate estimates by RDV regression -- Influenza H3N2") +
theme_bw()
p
alns
alns[which(Rates[, "mean"] < 0)]
alns[which(Rates[, "mean"] < 0)]
which.min(Rates[, "mean"])
alns[ which.min(Rates[, "mean"])]
getwd()
Alns <- lapply(alns, function(x) ape::read.dna(x, format = "fasta"))
Diversities <- lapply(Alns, function(x) pegas::nuc.div(x))
Diversities
Diversities <- unlist(lapply(Alns, function(x) pegas::nuc.div(x)))
plot(Rates[, "mean"]~Diversities)
plot(Diversities~spans)
boxplot(Diversities~spans)
p
ifelse(Rates[, "mean"] < 0, 1, 0)
boxplot(Diversities~ ifelse(Rates[, "mean"] < 0, 1, 0))
boxplot(Diversities ~ ifelse(Rates[, "mean"] < 0, 1, 0))
p <- ggplot(forPlot, aes(x = time_span, y = mean)) +
geom_smooth(method = 'lm') +
geom_pointrange(aes(ymin = lwr, ymax = upr), position = position_dodge(0.5)) +
geom_abline(intercept = 0, slope = 0, linetype = "longdash", size = .5, color = "black") +
scale_y_continuous("Evolutionary Rate (s/s/y) [regression slope]",
breaks = number_ticks(10), expand = c(0, 0)) +
scale_x_continuous("Sampling span (years)", breaks = number_ticks(10), expand = c(0, 0)) +
ggtitle("Rate estimates by RDV regression -- Influenza H3N2") +
theme_bw()
p
setwd("~/Dropbox/virus_time_dependency/code")
library(ape)
devtools::source_url("https://raw.githubusercontent.com/maxbiostat/CODE/master/R/PHYLO/find_best_rooting.R")
rm(get.ages)
lastf <- function(x) x[length(x)]
get.ages <- function(tree){
dates <- unlist(lapply(strsplit(tree$tip.label, "_"), lastf))
return(as.numeric(dates))
}
estimate_rate <- function(aln){
Stem <- gsub(".fasta", "", aln)
MLtree <- read.tree(paste(Stem, "_MLTree.nwk", sep = ""))
res <- find_best_rooting(MLtree)$lm
return(res)
}
setwd("../data/processed/aligned/")
alns <- system("ls *.fasta", intern = TRUE)
Alns <- lapply(alns, function(x) ape::read.dna(x, format = "fasta"))
Diversities <- unlist(lapply(Alns, function(x) pegas::nuc.div(x)))
Names <- gsub(".fasta", "", alns)
RDVS <- parallel::mclapply(alns, estimate_rate, mc.cores = 8)
setwd("../../../code/")
getRate <- function(lm_obj){
m <-  coef(lm_obj)[2]
ci <- confint(lm_obj)[2, ]
return(c(ci[1], m, ci[2]))
}
getSpan <- function(rdv){
r <-range(rdv$model$ages)
r[2]-r[1]
}
spans <- unlist(lapply(RDVS, getSpan))
Rates <- matrix(NA, ncol = 3, nrow = length(RDVS))
colnames(Rates) <- c("lwr", "mean", "upr")
for (i in 1:nrow(Rates)) Rates[i, ] <- getRate(RDVS[[i]])
##############
alns[which(Rates[, "mean"] < 0)] ## problematic data sets
alns[which.min(Rates[, "mean"])]
boxplot(Diversities ~ ifelse(Rates[, "mean"] < 0, 1, 0)) ## differences in diversity between rates < 0 and rates > 0
##############
library(ggplot2)
forPlot <- data.frame(Rates, time_span = spans)
number_ticks <- function(n) { function(limits) pretty(limits, n) }
p <- ggplot(forPlot, aes(x = time_span, y = mean)) +
geom_smooth(method = 'lm') +
geom_pointrange(aes(ymin = lwr, ymax = upr), position = position_dodge(0.5)) +
geom_abline(intercept = 0, slope = 0, linetype = "longdash", size = .5, color = "black") +
scale_y_continuous("Evolutionary Rate (s/s/y) [regression slope]",
breaks = number_ticks(10), expand = c(0, 0)) +
scale_x_continuous("Sampling span (years)", breaks = number_ticks(10), expand = c(0, 0)) +
ggtitle("Rate estimates by RDV regression -- Influenza H3N2") +
theme_bw()
p
plot(Diversities ~ spans)
abline(lm(Diversities ~ spans))
setwd("~/Dropbox/virus_time_dependency/code")
library(ape)
devtools::source_url("https://raw.githubusercontent.com/maxbiostat/CODE/master/R/PHYLO/find_best_rooting.R")
rm(get.ages)
lastf <- function(x) x[length(x)]
get.ages <- function(tree){
dates <- unlist(lapply(strsplit(tree$tip.label, "_"), lastf))
return(as.numeric(dates))
}
estimate_rate <- function(aln){
Stem <- gsub(".fasta", "", aln)
MLtree <- read.tree(paste(Stem, "_MLTree.nwk", sep = ""))
res <- find_best_rooting(MLtree)$lm
return(res)
}
setwd("../data/processed/aligned/")
alns <- system("ls *.fasta", intern = TRUE)
Alns <- lapply(alns, function(x) ape::read.dna(x, format = "fasta"))
Diversities <- unlist(lapply(Alns, function(x) pegas::nuc.div(x)))
Names <- gsub(".fasta", "", alns)
RDVS <- parallel::mclapply(alns, estimate_rate, mc.cores = 8)
setwd("../../../code/")
getRate <- function(lm_obj){
m <-  coef(lm_obj)[2]
ci <- confint(lm_obj)[2, ]
return(c(ci[1], m, ci[2]))
}
getSpan <- function(rdv){
r <-range(rdv$model$ages)
r[2]-r[1]
}
spans <- unlist(lapply(RDVS, getSpan))
Rates <- matrix(NA, ncol = 3, nrow = length(RDVS))
colnames(Rates) <- c("lwr", "mean", "upr")
for (i in 1:nrow(Rates)) Rates[i, ] <- getRate(RDVS[[i]])
##############
alns[which(Rates[, "mean"] < 0)] ## problematic data sets
alns[which.min(Rates[, "mean"])]
##
plot(Diversities ~ spans)
abline(lm(Diversities ~ spans))
##
boxplot(Diversities ~ ifelse(Rates[, "mean"] < 0, 1, 0)) ## differences in diversity between rates < 0 and rates > 0
##############
library(ggplot2)
forPlot <- data.frame(Rates, time_span = spans)
number_ticks <- function(n) { function(limits) pretty(limits, n) }
p <- ggplot(forPlot, aes(x = time_span, y = mean)) +
geom_smooth(method = 'lm') +
geom_pointrange(aes(ymin = lwr, ymax = upr), position = position_dodge(0.5)) +
geom_abline(intercept = 0, slope = 0, linetype = "longdash", size = .5, color = "black") +
scale_y_continuous("Evolutionary Rate (s/s/y) [regression slope]",
breaks = number_ticks(10), expand = c(0, 0)) +
scale_x_continuous("Sampling span (years)", breaks = number_ticks(10), expand = c(0, 0)) +
ggtitle("Rate estimates by RDV regression -- Influenza H3N2") +
theme_bw()
p
LM <- lm(Diversities ~ spans)
summary(LM)
hist(Diversities)
alns[which.max(Rates[, "mean"])]
max(Rates[, "mean"])
setwd("~/Dropbox/virus_time_dependency/code")
metadata <- read.csv("../data/raw/FLu_8445_segments_METADATA.csv", header = TRUE)
lastf <- function(x) x[length(x)]
metadata$Collection.Year <- as.numeric(unlist(lapply(strsplit(as.character(metadata$Collection.Date), "/"), lastf)))
Freqs.full <- table(metadata$Collection.Year)
Freqs.full
metadata$Sequence.Accession  <- gsub("\\*", "", metadata$Sequence.Accession)
########
# Renaming sequences, remove commenting to run
Accessions <- metadata$Sequence.Accession
Accessions <- gsub("\\*", "", Accessions)
oriAln <- ape::read.dna("../data/raw/flu_8445_segments_seqs_aligned.fasta", format = "fasta")
Names <- sapply(1:nrow(metadata),
function(i) paste("seq", i, Accessions[i], metadata$Collection.Year[i], sep = "_")
)
Positions <- sapply(Accessions, function(x) grep(x, names(oriAln)))
table(unlist(lapply(Positions, length))) ## check one
length(unique(Positions)) == nrow(metadata) ## should be true, i.e., every sequence was found
newAln <- oriAln
names(newAln) <- Names[Positions]
ape::write.dna(newAln, "../data/raw/flu_8445_segments_seqs_aligned_renamed.fasta", format = "fasta")
Master <- metadata
nSeqs <- 50
Size <- floor(nrow(Master)/nSeqs)
Tentative.samples <- vector(Size, mode = "list")
for(i in 1:Size){
pos <- sample(1:nrow(Master), nSeqs, replace = FALSE)
Tentative.samples[[i]] <- Master[pos, ]
Master <- Master[-pos, ]
}
getSpan <- function(dt) max(dt$Collection.Year) - min(dt$Collection.Year)
Spans <- unlist(lapply(Tentative.samples, getSpan))
table(Spans)
####
Aln <- ape::read.dna("../data/raw/flu_8445_segments_seqs_aligned_renamed.fasta", format = "fasta")
getSeq <- function(genbank_id, aln){
pos <- grep(genbank_id, names(aln))
if(length(pos) > 1) stop("Something is wrong, ID maps to multiple sequences")
return(aln[pos])
}
getAln <- function(dt){
aln <- unlist(lapply(dt$Sequence.Accession, function(x) getSeq(genbank_id = x, aln = Aln)), recursive = FALSE)
class(aln) <- "DNAbin"
return(aln)
}
Sequences_samples <- lapply(Tentative.samples, getAln)
export_seqs <- function(index){
ape::write.dna(Sequences_samples[[index]],
file = paste("../data/processed/flu_50seqs_dataset_", index, ".fasta", sep = "") ,
format = "fasta")
}
sapply(seq_along(Sequences_samples), export_seqs)
metadata <- read.csv("../data/raw/FLu_8445_segments_METADATA.csv", header = TRUE)
lastf <- function(x) x[length(x)]
metadata$Collection.Year <- as.numeric(unlist(lapply(strsplit(as.character(metadata$Collection.Date), "/"), lastf)))
Freqs.full <- table(metadata$Collection.Year)
Freqs.full
metadata$Sequence.Accession  <- gsub("\\*", "", metadata$Sequence.Accession)
########
# Renaming sequences, remove commenting to run
# Accessions <- metadata$Sequence.Accession
# Accessions <- gsub("\\*", "", Accessions)
# oriAln <- ape::read.dna("../data/raw/flu_8445_segments_seqs_aligned.fasta", format = "fasta")
# Names <- sapply(1:nrow(metadata),
#                 function(i) paste("seq", i, Accessions[i], metadata$Collection.Year[i], sep = "_")
# )
# Positions <- sapply(Accessions, function(x) grep(x, names(oriAln)))
# table(unlist(lapply(Positions, length))) ## check one
# length(unique(Positions)) == nrow(metadata) ## should be true, i.e., every sequence was found
# newAln <- oriAln
# names(newAln) <- Names[Positions]
# ape::write.dna(newAln, "../data/raw/flu_8445_segments_seqs_aligned_renamed.fasta", format = "fasta")
################################
howManysamples <- function(time_span, freqs){
if(time_span < 2) stop("Time span less than 2 years makes no sense")
Years <- as.numeric(names(freqs))
windows <- seq(min(Years), max(Years), by = time_span)
K <- length(windows) + 1
Sizes <- vector(K, mode = "list")
for(k in 2:K) Sizes[[k]] <- freqs[which(Years > windows[k-1] & Years <= windows[k])]
Sizes <- Sizes[!sapply(Sizes, is.null)]
return(Sizes)
}
howManysamples(time_span = 13, freqs = Freqs.full)
#################################
Master <- metadata
nSeqs <- 50
Size <- floor(nrow(Master)/nSeqs)
Tentative.samples <- vector(Size, mode = "list")
for(i in 1:Size){
pos <- sample(1:nrow(Master), nSeqs, replace = FALSE)
Tentative.samples[[i]] <- Master[pos, ]
Master <- Master[-pos, ]
}
getSpan <- function(dt) max(dt$Collection.Year) - min(dt$Collection.Year)
Spans <- unlist(lapply(Tentative.samples, getSpan))
table(Spans)
####
Aln <- ape::read.dna("../data/raw/flu_8445_segments_seqs_aligned_renamed.fasta", format = "fasta")
getSeq <- function(genbank_id, aln){
pos <- grep(genbank_id, names(aln))
if(length(pos) > 1) stop("Something is wrong, ID maps to multiple sequences")
return(aln[pos])
}
getAln <- function(dt){
aln <- unlist(lapply(dt$Sequence.Accession, function(x) getSeq(genbank_id = x, aln = Aln)), recursive = FALSE)
class(aln) <- "DNAbin"
return(aln)
}
Sequences_samples <- lapply(Tentative.samples, getAln)
export_seqs <- function(index){
ape::write.dna(Sequences_samples[[index]],
file = paste("../data/processed/flu_50seqs_dataset_", index, ".fasta", sep = "") ,
format = "fasta")
}
sapply(seq_along(Sequences_samples), export_seqs)
metadata <- read.csv("../data/raw/FLu_8445_segments_METADATA.csv", header = TRUE)
lastf <- function(x) x[length(x)]
metadata$Collection.Year <- as.numeric(unlist(lapply(strsplit(as.character(metadata$Collection.Date), "/"), lastf)))
Freqs.full <- table(metadata$Collection.Year)
Freqs.full
metadata$Sequence.Accession  <- gsub("\\*", "", metadata$Sequence.Accession)
########
# Renaming sequences, remove commenting to run
# Accessions <- metadata$Sequence.Accession
# Accessions <- gsub("\\*", "", Accessions)
# oriAln <- ape::read.dna("../data/raw/flu_8445_segments_seqs_aligned.fasta", format = "fasta")
# Names <- sapply(1:nrow(metadata),
#                 function(i) paste("seq", i, Accessions[i], metadata$Collection.Year[i], sep = "_")
# )
# Positions <- sapply(Accessions, function(x) grep(x, names(oriAln)))
# table(unlist(lapply(Positions, length))) ## check one
# length(unique(Positions)) == nrow(metadata) ## should be true, i.e., every sequence was found
# newAln <- oriAln
# names(newAln) <- Names[Positions]
# ape::write.dna(newAln, "../data/raw/flu_8445_segments_seqs_aligned_renamed.fasta", format = "fasta")
################################
howManysamples <- function(time_span, freqs){
if(time_span < 2) stop("Time span less than 2 years makes no sense")
Years <- as.numeric(names(freqs))
windows <- seq(min(Years), max(Years), by = time_span)
K <- length(windows) + 1
Sizes <- vector(K, mode = "list")
for(k in 2:K) Sizes[[k]] <- freqs[which(Years > windows[k-1] & Years <= windows[k])]
Sizes <- Sizes[!sapply(Sizes, is.null)]
return(Sizes)
}
howManysamples(time_span = 13, freqs = Freqs.full)
#################################
Master <- metadata
nSeqs <- 50
Size <- floor(nrow(Master)/nSeqs)
Tentative.samples <- vector(Size, mode = "list")
for(i in 1:Size){
pos <- sample(1:nrow(Master), nSeqs, replace = FALSE)
Tentative.samples[[i]] <- Master[pos, ]
Master <- Master[-pos, ]
}
getSpan <- function(dt) max(dt$Collection.Year) - min(dt$Collection.Year)
Spans <- unlist(lapply(Tentative.samples, getSpan))
table(Spans)
####
Aln <- ape::read.dna("../data/raw/flu_8445_segments_seqs_aligned_renamed.fasta", format = "fasta")
getSeq <- function(genbank_id, aln){
pos <- grep(genbank_id, names(aln))
if(length(pos) > 1) stop("Something is wrong, ID maps to multiple sequences")
return(aln[pos])
}
getAln <- function(dt){
aln <- unlist(lapply(dt$Sequence.Accession, function(x) getSeq(genbank_id = x, aln = Aln)), recursive = FALSE)
class(aln) <- "DNAbin"
return(aln)
}
Sequences_samples <- lapply(Tentative.samples, getAln)
export_seqs <- function(index){
ape::write.dna(Sequences_samples[[index]],
file = paste("../data/processed/flu_50seqs_dataset_", index, ".fasta", sep = "") ,
format = "fasta")
}
sapply(seq_along(Sequences_samples), export_seqs)
setwd("~/Dropbox/virus_time_dependency/code")
library(ape)
devtools::source_url("https://raw.githubusercontent.com/maxbiostat/CODE/master/R/PHYLO/find_best_rooting.R")
rm(get.ages)
lastf <- function(x) x[length(x)]
get.ages <- function(tree){
dates <- unlist(lapply(strsplit(tree$tip.label, "_"), lastf))
return(as.numeric(dates))
}
estimate_rate <- function(aln){
Stem <- gsub(".fasta", "", aln)
MLtree <- read.tree(paste(Stem, "_MLTree.nwk", sep = ""))
res <- find_best_rooting(MLtree)$lm
return(res)
}
setwd("../data/processed/aligned/")
alns <- system("ls *.fasta", intern = TRUE)
Alns <- lapply(alns, function(x) ape::read.dna(x, format = "fasta"))
Diversities <- unlist(lapply(Alns, function(x) pegas::nuc.div(x)))
Names <- gsub(".fasta", "", alns)
RDVS <- parallel::mclapply(alns, estimate_rate, mc.cores = 8)
setwd("../../../code/")
getRate <- function(lm_obj){
m <-  coef(lm_obj)[2]
ci <- confint(lm_obj)[2, ]
return(c(ci[1], m, ci[2]))
}
getSpan <- function(rdv){
r <-range(rdv$model$ages)
r[2]-r[1]
}
spans <- unlist(lapply(RDVS, getSpan))
Rates <- matrix(NA, ncol = 3, nrow = length(RDVS))
colnames(Rates) <- c("lwr", "mean", "upr")
for (i in 1:nrow(Rates)) Rates[i, ] <- getRate(RDVS[[i]])
##############
alns[which(Rates[, "mean"] < 0)] ## problematic data sets
alns[which.min(Rates[, "mean"])]
alns[which.max(Rates[, "mean"])]
##
plot(Diversities ~ spans)
LM <- lm(Diversities ~ spans)
summary(LM)
abline(LM)
##
boxplot(Diversities ~ ifelse(Rates[, "mean"] < 0, 1, 0)) ## differences in diversity between rates < 0 and rates > 0
##############
library(ggplot2)
forPlot <- data.frame(Rates, time_span = spans)
number_ticks <- function(n) { function(limits) pretty(limits, n) }
p <- ggplot(forPlot, aes(x = time_span, y = mean)) +
geom_smooth(method = 'lm') +
geom_pointrange(aes(ymin = lwr, ymax = upr), position = position_dodge(0.5)) +
geom_abline(intercept = 0, slope = 0, linetype = "longdash", size = .5, color = "black") +
scale_y_continuous("Evolutionary Rate (s/s/y) [regression slope]",
breaks = number_ticks(10), expand = c(0, 0)) +
scale_x_continuous("Sampling span (years)", breaks = number_ticks(10), expand = c(0, 0)) +
ggtitle("Rate estimates by RDV regression -- Influenza H3N2") +
theme_bw()
p
pdf("../plots/preliminary_influenza.pdf")
p
dev.off()
